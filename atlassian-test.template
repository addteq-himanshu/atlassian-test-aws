{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Test Atlassian deployment including:\r\n\r\nNginx front end\r\nCrowd\r\nJIRA\r\nConfluence\r\nStash\r\nBamboo\r\nPostgres RDS DB",

  "Parameters": {
  },

  "Mappings": {
  },

  "Conditions": {
  },

  "Resources": {

    "vpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": false,
        "InstanceTenancy": "default"
      }
    },

    "internetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },

    "vpcGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": { "Ref": "internetGateway" },
        "VpcId": { "Ref": "vpc" }
      }
    },

    "routeTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "vpc" }
      }
    },

    "route": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "vpcGatewayAttachment",
      "Properties": {
        "RouteTableId": { "Ref": "routeTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "internetGateway" }
      }
    },

    "subnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "vpc"},
        "CidrBlock": "10.0.0.0/24",
        "AvailabilityZone": "us-east-1b"
      }
    },

    "subnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "routeTable" },
        "SubnetId": { "Ref": "subnet1" }
      }
    },

    "iamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "atlassian-test",
          "PolicyDocument": {
            "Version" : "2012-10-17",
            "Statement": [ {
              "Effect": "Allow",
              "Action": "s3:GetObject",
              "Resource": "arn:aws:s3:::atlassian.pghalliday.net/*"
            }]
          }
        }]
      }
    },

    "iamInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "iamRole" } ]
      }
    },
    
    "nginxFrontEndSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "enable SSH and HTTP incoming and anything outgoing",
        "VpcId": { "Ref": "vpc" },
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": "0.0.0.0/0"
        }, {
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": "0.0.0.0/0"
        }],
        "SecurityGroupEgress": [{
          "IpProtocol": "-1",
          "FromPort": "0",
          "ToPort": "65535",
          "CidrIp": "0.0.0.0/0"
        }]
      }
    },

    "nginxFrontEnd": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": "vpcGatewayAttachment",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "/tmp/NginxFrontEnd.tar.gz": {
                "source": "https://s3.amazonaws.com/atlassian.pghalliday.net/NginxFrontEnd.tar.gz",
                "Authentication": "s3",
                "mode": "000644",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "001_InstallChef": {
                "command": "wget -O - https://www.opscode.com/chef/install.sh | sh",
                "test": "! which chef-client"
              },
              "002_UnpackCookbooks": {
                "command": "rm -rf cookbooks && tar zxf NginxFrontEnd.tar.gz",
                "cwd": "/tmp"
              },
              "003_RunChef": {
                "command": "chef-client -z -r NginxFrontEnd",
                "cwd": "/tmp"
              }
            }
          }
        },
        "AWS::CloudFormation::Authentication": {
          "s3": {
            "type": "S3",
            "buckets": [ "atlassian.pghalliday.net" ],
            "roleName": { "Ref": "iamRole" }
          }
        }
      },
      "Properties": {
        "AvailabilityZone": "us-east-1b",
        "ImageId": "ami-9a562df2",
        "InstanceType": "t2.micro",
        "KeyName": "atlassian-test",
        "PrivateIpAddress": "10.0.0.100",
        "SecurityGroupIds": [
          { "Ref": "nginxFrontEndSecurityGroup" }
        ],
        "SubnetId": { "Ref": "subnet1" },
        "IamInstanceProfile": { "Ref": "iamInstanceProfile" },
        "UserData": { "Fn::Base64": { "Fn::Join": ["", [
          "#!/bin/bash -ex", "\n",
          "apt-get update", "\n",
          "apt-get -y install python-setuptools", "\n",
          "wget -P /root https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz", "\n",
          "mkdir -p /root/aws-cfn-bootstrap-latest", "\n",
          "tar xvfz /root/aws-cfn-bootstrap-latest.tar.gz --strip-components=1 -C /root/aws-cfn-bootstrap-latest", "\n",
          "easy_install /root/aws-cfn-bootstrap-latest/", "\n",
          "/usr/local/bin/cfn-init -s ", { "Ref": "AWS::StackName" },
          "  -r nginxFrontEnd",
          "  --region ", { "Ref": "AWS::Region" }, "\n"
        ]]}}
      }
    },

    "elasticIp": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "vpcGatewayAttachment",
      "Properties": {
        "InstanceId": { "Ref": "nginxFrontEnd" },
        "Domain": "vpc"
      }
    },

    "atlassianRoute53RecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": "pghalliday.net.",
        "Name": "atlassian.pghalliday.net.",
        "Type": "A",
        "TTL": "900",
        "ResourceRecords": [
          { "Ref": "elasticIp" }
        ]
      }
    }

  },

  "Outputs": {
  }
}
